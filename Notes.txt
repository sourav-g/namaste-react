1. Even angular can be injected only in part of our page using id ?
 -- Possible, but since its a full-fedged framework, comes with a lot of baggage
2. Create a package and upload to npm and download and use
3. ^ vs ~ in package.json
4. Transitive dependency
5. npm - install a pkg ; npx - executing a pkg
6. what is .map files for css and js?
7. module patterns in JS - CommonJS,AMD
8. JSX is separate - not part of react
9. what is XML ?
10. Can we use JSX with Angular and others
11. Symbol in react element
12. JSX transpiled before it reaches the JS engine - done by parser-babel (as part of parcel ?),
    So without parcel, JSX will not work ???

13. JSX =babel==> React.createElement => React Element (JS Object) => HTML Element (render)
14. does babel read/parse a JS file line-by-line in sequence
15. does babel always converts JSX to React element only ??
16. any JS inside JSX - {...} . even imports ??
17. Can we create infinte loop in hTMl ( includes??)
18. JSX {..} sanitizes before executing, so Cross Site scripting attack is not possible. It uses escapes ???
19. let and const are not hoisted ???
20. Can we write func declaration inside a component or always expression ?
21. What if we use normal func instead of arrow func, in method as well as component func ?
22. tree shaking in react
23. Look at all build/bundling concepts in React.
24. Why react expects a root <div>,<> always

-----------------------------------------

1. Should we start writing React components top->bottom or ground -> up ?
2. Passing a prop to a function is like passing an argument to a function. 
3. Config-driven UI
4.* When display grid vs flex ? [flex-grow/shrink etc]
5.* creating shapes using svg ? advantages of svg [https://deliciousbrains.com/svg-advantages-developers/]
6.* proposal stages in Ecmascript (stage-0,etc)
7. .js vs .jsx 
8. Config driven UI is layout or data content also ?? Design a config-driven spec in JSON
9. Can we have named and default export in same file ?
10. does react have 2 way binding ?
11. CORS akshay video [ what does Origin consist of ?]
12. Does React re-render entire component, even if one part is changing ? Then how is VirtualDOM and Diff algorithm is useful ?
13. useState holds changed value in memory and sets in on next re-render ?
    If only a part is being changed, then on re-render diff algorithm compares and figures out the changed part and paint only 
    that to the DOM ? -- Reconciliation
14. Why we need state variable and cannot do with normal JS variables ?

--------------------------------------------

1. React router v5 and v6
2. Client side vs Server side routing [https://stackoverflow.com/questions/23975199/when-to-use-client-side-routing-or-server-side-routing]
3. SPA - one page just components getting interchanged via Clientside routing.
4. Equivalent of directives,services,pipes,filters in React ?
5. REST API URL and versioning (/v1 , /v2) OpenAPI ? - Understand NDFS api also
6. GraphQL - helps with overfetching of data. Fetch only data that is required in UI ? - NDFS use case 
7. React Router uses DOM History API - Understand it.
8. React Router vs React Router DOM
9. React vs React DOM
10.How to create a JS lib and publish in NPM ?
11.Can we not give 'errorElement' in children routes and prevent error to display in entire page ?
12. How to understand Components Tree and Profiler in dev tools.
13. Explore different form of routers - BrowserRouter, HashRouter, etc

    https://rayobyte.com/blog/data-structures-and-algorithms-in-web-development/#:~:text=Linear%20data%20structures&text=They're%20most%20suitable%20for,of%20the%20same%20type%20together.


------------------------------

1. Why do we write super(props) ?
2. props and state
3. Multiple state variables can be created one shot in class based components, but 
   for functional components, one useState hook per varible ?
4. Reactive programming
5. In CB component, when to write JS inside render() method vs outside ? 
6. Will componentDidUpdate, get called even if setState do not change any variable ??

7. For loop not allowed inside JSX -> It's because the JSX expects anything inside of it to return an object to be displayed. 
   A for loop does not return anything, but map does.

  ---------------------------------

  1. Single responsibility principle - Reusable, Maintainable, Testable 
  2. API contract ?
  3. Are custom hooks alternative of services in react ?
  4. ** How core hooks like useEffect works BEHIND THE SCENES ?
  5. Use Cases of useEffect
  6. Building a JS bundler [https://cpojer.net/posts/building-a-javascript-bundler#modern-bundling]
  7. JS module system [ CommonJS(server-side JS) vs AMD(browser JS)]
  8. Config Driven UI parser in JS [ look at NCP parser also]
  9. Custom hooks starts with 'use' is the convention.

  --------------------------------------------------------------

  1. SCSS & SASS , styled components [ used in industry]
  2. Material UI, bootstrap, chakra ui
  3. Design Systems : Material Design, Fluent Design, Ant Design
  4. styled Component library - using Web components/ frameworkspecific ui components
  (https://github.com/web-padawan/awesome-web-components?tab=readme-ov-file#component-libraries)
  5. rem, px, %, vw-vh
  6. creating a design system using css/tailwindcss
  
  ---------------------------------------------------------------

  1. Why higher-order components is required ?
  2. Controlled and not controlled component
  3. Lifting the state up
  4. Props Drilling - drilling across the component tree till the leaf [problem]
  4. a) Use context
  5. Data flows in one direction -> top to bottom in component tree
  6. How to share data between sibling components ?
  7. Re-render optimisation : https://medium.com/@ztolley/react-re-render-optimisation-d16ba64754a5


  ---------------------------------------------------------------
 
  Redux : 

  1. One library gaining popularity -> Zustaand
  2. Does redux use pub-sub pattern ?
  3. Understand vanilla redux. How RTK has improved usage ?
  4. Think through real life analogies for redux
  5. How redux was used in large scale apps before Redux Toolkit (which came in 2019) ?
  6. How is redux store different from a normal service (like in Angular) ?  ***  
     [https://stackoverflow.com/questions/51274343/angular-6-why-use-ngrx-store-rather-than-service-injection] (THIS w.r.t Angular)
     [https://gist.github.com/btroncone/a6e4347326749f938510]
  7. Does using redux improves app performance or developer productivity or both ?
  8. Actions and Reducers in Redux. Why is it named REDUCER ?
  9. Provider concept in software
  10. What are hooks in react, and what is its use-cases ?
  11. Difference between these 3:
        onClick={handleAddItem}
        onClick={(item)=>handleAddItem(item)}    //callback fn
        onClick={handleAddItem(item)}  
  12. Always subscribe to specific portion of the store [ performant ]
  13. In older redux -> DON'T mutate the state, take a copy and modify
      In new RTK     -> HAVE TO mutate the state
      WHY and how this change ?

  14. Behind the scenes, Redux still is creating a new state copy and making things work.
      (using immerjs under the hood). But that burden is removed from the developers.
      We dont have to worry about writing reducer as a PURE fn, anymore.        
  
  15. * How to create an immutable deep clone of a multilevel JS object ?
        since this was required earlier in a reducer.

  16. redux devtools
  17. Async operations inside redux : (like API call)
        Old way -> Middleware & thunks
        New way -> RTK query
  18. React with Typescript. [https://www.appsdevpro.com/blog/react-with-typescript-vs-javascript/]
  19. useReducer hook vs using Redux
  20. React with or without SSR


-----------------------------------------------------------

  TEST :

  1. TDD
  2. Unit Testing              - test a single unit of the app  
     Integration Testing       - test specific flow, a particular feature - 2 or more units interact  
     End to End (e2e) testing  - test all flows - needs specific tools like Selenium

  3. React Testing library -> uses JEST behind the scenes
  4. JEST - standard for testing JS now
  5. __xx__ = dunder
  6. Virtual DOM = React fiber node = JSX element = React Element = VD Object
  7. Basic of Test Case in react :
        - render something
        - query something
        - assert something
  8. TDD / DDD
  9. Able to import MOCK Json data, even though NO explicit export statement in .json file ?sourav
  10. Using JEST with angular ?     
  11. Different JS testing frameworks [https://dev.to/heroku/comparing-the-top-3-javascript-testing-frameworks-2cco]
  12. *** https://dev.to/srmagura/bad-habits-of-mid-level-react-developers-b41
  13. 



----------------------------------------------------------------

1. Reactive programming, Observables, RxJS [https://medium.com/@davidjtomczyk/introduction-to-observable-85a5122bf260]
2. https://reactivex.io/
3. server-side rendering (SSR) and client-side rendering (CSR) techniques.
4. Hydration in Angular/React  - ngIndia